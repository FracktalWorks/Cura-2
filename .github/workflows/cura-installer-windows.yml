name: Windows Installer
run-name: ${{ inputs.cura_conan_version }} for Windows-${{ inputs.architecture }} by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      # cura_conan_version:
      #   description: 'Cura Conan Version'
      #   default: 'cura/5.6.0'
      #   required: true
      #   type: string

      conan_args:
        description: 'Conan args: eq.: --require-override'
        default: ''
        required: false
        type: string

      enterprise:
        description: 'Build Cura as an Enterprise edition'
        default: false
        required: true
        type: boolean

      staging:
        description: 'Use staging API'
        default: false
        required: true
        type: boolean

      architecture:
        description: 'Architecture'
        required: true
        default: 'X64'
        type: string

      operating_system:
        description: 'OS'
        required: true
        default: 'windows-2022'
        type: string

      conan_internal:
        required: false
        default: false
        type: boolean

permissions:
  contents: read

env:
  # CONAN_LOGIN_USERNAME: ${{ secrets.CONAN_USER }}
  # CONAN_PASSWORD: ${{ secrets.CONAN_PASS }}
  WIN_CERT_INSTALLER_CER: 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
  WIN_CERT_INSTALLER_CER_PASS: 123456
  CURA_CONAN_VERSION: cura/5.6.0
  ENTERPRISE: false
  STAGING: false

jobs:
  cura-installer-create:
    runs-on: ${{ inputs.operating_system }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
        with:
          fetch-depth: 1
          ref: ${{ github.head_ref }}

      - name: Checkout repo PR
        uses: actions/checkout@v4
        if: ${{ github.event.pull_request.head.repo.full_name != github.repository }}
        with:
          fetch-depth: 1
          ref: ${{ github.base_ref }}

      - name: Sync pip requirements
        run: curl -O https://raw.githubusercontent.com/Ultimaker/cura-workflows/main/.github/workflows/requirements-runner.txt
        working-directory: .github\workflows

      - name: Setup Python and pip
        uses: actions/setup-python@v4
        with:
          python-version: 3.11.x
          cache: pip
          cache-dependency-path: .\.github\workflows\requirements-runner.txt

      - name: Install Python requirements and Create default Conan profile
        run: pip install -r .\.github\workflows\requirements-runner.txt

      - name: Setup pipeline caches
        run: |
          New-Item -ItemType Directory -Force -Path C:\Users\runneradmin\.conan\downloads

      - name: Create default Conan profile
        run: conan profile new default --detect

      - name: Get Conan configuration
        run: |
          conan config install https://github.com/Ultimaker/conan-config.git
          conan config install https://github.com/Ultimaker/conan-config.git -a "-b runner/${{ runner.os }}/${{ runner.arch }}"

      - name: Add Cura private Artifactory remote
        if: ${{ inputs.conan_internal }}
        run: conan config install https://github.com/Ultimaker/conan-config.git -a "-b runner/internal"

      - name: Cache Conan downloads
        uses: actions/cache@v3
        with:
          path: C:\Users\runneradmin\.conan\downloads
          key: ${{ runner.os }}-conan-downloads-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-conan-downloads-

      - name: Create the Packages (Powershell)
        run: conan install $Env:CURA_CONAN_VERSION ${{ inputs.conan_args }} --build=missing --update -if cura_inst -g VirtualPythonEnv -o cura:enterprise=$Env:ENTERPRISE -o cura:staging=$Env:STAGING -o cura:internal=${{ inputs.conan_internal }} -c tools.build:skip_test=True -s curaengine:build_type=RelWithDebInfo

      - name: Set Environment variables for Cura (Powershell)
        run: |
          echo "${Env:WIX}\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          .\cura_inst\Scripts\activate_github_actions_env.ps1
          .\cura_inst\Scripts\activate_github_actions_version_env.ps1

      - name: Create the Cura dist
        run: pyinstaller ./cura_inst/UltiMaker-Cura.spec

      - name: Setup Sentry CLI
        uses: mathieu-bour/setup-sentry-cli@v1
        with:
          version: latest
          token: ${{ secrets.CURAENGINE_SENTRY_TOKEN }}
          organization: ultimaker-o7
          project: curaengine

      - name: Upload and remove debug symbols
        run: |
          sentry-cli debug-files upload .\UltiMaker-Cura\CuraEngine.exe
          sentry-cli debug-files upload .\UltiMaker-Cura\CuraEngine.pdb
          sentry-cli debug-files upload .\UltiMaker-Cura\Arcus.dll
          sentry-cli debug-files upload .\UltiMaker-Cura\polyclipping.dll
        working-directory: dist

      - name: Get installer helper scripts
        run: |
          New-Item -ItemType Directory -Force -Path runner_scripts
          cd runner_scripts
          curl -O https://raw.githubusercontent.com/Ultimaker/cura-workflows/main/runner_scripts/cura_installer_filename.py
          curl -O https://raw.githubusercontent.com/Ultimaker/cura-workflows/main/runner_scripts/summarize_used_dependencies.py

      - name: Output the name file name and extension
        id: filename
        run: python runner_scripts/cura_installer_filename.py --os ${{ runner.os }} --arch ${{ inputs.architecture }} --enterprise ${{ inputs.enterprise }} --internal ${{ inputs.conan_internal }}

      - name: Summarize the used dependencies
        run: python runner_scripts/summarize_used_dependencies.py --installer_filename ${{ steps.filename.outputs.INSTALLER_FILENAME }}

      - name: Create PFX certificate from BASE64_PFX_CONTENT secret
        id: create-pfx
        env:
          PFX_CONTENT: ${{ secrets.WIN_CERT_INSTALLER_CER }}
        run: |
          $pfxPath = Join-Path -Path $env:RUNNER_TEMP -ChildPath "cert.pfx"; 
          $encodedBytes = [System.Convert]::FromBase64String($env:PFX_CONTENT); 
          Set-Content $pfxPath -Value $encodedBytes -AsByteStream;
          echo "PFX_PATH=$pfxPath" >> $env:GITHUB_OUTPUT;

      - name: Create the Windows msi installer (Powershell)
        run: |
          python ..\cura_inst\packaging\msi\create_windows_msi.py ..\cura_inst .\UltiMaker-Cura "${{steps.filename.outputs.INSTALLER_FILENAME }}.msi" "$Env:CURA_APP_NAME"
        working-directory: dist

      - name: Sign the Windows msi installer (Powershell)
        env:
          PFX_PATH: ${{ steps.create-pfx.outputs.PFX_PATH }}
        run: |
          & "C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe" sign /f $Env:PFX_PATH /p "$Env:WIN_CERT_INSTALLER_CER_PASS" /fd SHA256 /t http://timestamp.digicert.com "${{steps.filename.outputs.INSTALLER_FILENAME }}.msi"
        working-directory: dist

      - name: Create the Windows exe installer (Powershell)
        run: |
          python ..\cura_inst\packaging\NSIS\create_windows_installer.py ../cura_inst . "${{steps.filename.outputs.INSTALLER_FILENAME }}.exe"
        working-directory: dist

      - name: Sign the Windows exe installer (Powershell)
        env:
          PFX_PATH: ${{ steps.create-pfx.outputs.PFX_PATH }}
        run: |
          & "C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe" sign /f $Env:PFX_PATH /p "$Env:WIN_CERT_INSTALLER_CER_PASS" /fd SHA256 /t http://timestamp.digicert.com "${{steps.filename.outputs.INSTALLER_FILENAME }}.exe"
        working-directory: dist

      - name: Remove internal packages before uploading
        run: |
          conan remove "*@internal/*" -f || true
          conan remove "cura_private_data*" -f || true

      - name: Upload the Package(s)
        if: ${{ always() && ! inputs.conan_internal }}
        run: conan upload "*" -r cura --all -c

      - name: Upload the msi
        uses: actions/upload-artifact@v3
        with:
          name: ${{steps.filename.outputs.INSTALLER_FILENAME }}-msi
          path: |
            dist/${{steps.filename.outputs.INSTALLER_FILENAME }}.msi
          retention-days: 5

      - name: Upload the exe
        uses: actions/upload-artifact@v3
        with:
          name: ${{steps.filename.outputs.INSTALLER_FILENAME }}-exe
          path: |
            dist/${{steps.filename.outputs.INSTALLER_FILENAME }}.exe
          retention-days: 5

      # NOTE: The extension is .sh, since this isn't going to build-environment, so not on the Win build image.
      - name: Write the run info
        shell: python
        run: |
          import os
          with open("run_info.sh", "w") as f:
              f.writelines(f'echo "CURA_VERSION_FULL={os.environ["CURA_VERSION_FULL"]}" >> $GITHUB_ENV\n')

      # NOTE: The extension is .sh, since this isn't going to build-environment, so not on the Win build image.
      - name: Upload the run info
        uses: actions/upload-artifact@v3
        with:
          name: windows-run-info
          path: |
            run_info.sh
          retention-days: 5
